function varargout=fun_hcp_preprocessing_pipeline(varargin)
%% INPUTS:
%     data_dir: Directory where the HCP files have been unzipped
%% default flag
FLAG.NEWPROTOCAOL=1;
FLAG.PREPROCESSING=1;
FLAG.HEADMODEL=1;
%% read vaiable input
switch nargin
    case 1
        load ./temp/config.mat
    case 3
        ProtocolName=varargin{1};
        data_dir=varargin{2};
        SubjectName=varargin{3};
    case 4
        ProtocolName=varargin{1};
        data_dir=varargin{2};
        SubjectName=varargin{3};
        FLAG=varargin{4};
end
%%
% data_dir='M:\MEEGfMRI\Data\HCP_S900\';
%% ===== FILES TO IMPORT =====
% You have to specify the folder in which the tutorial dataset is unzipped
% if (nargin == 0) || isempty(data_dir) || ~file_exist(data_dir)
if isempty(data_dir) || ~file_exist(data_dir)
    error('The first argument must be the full path to the tutorial dataset folder.');
end
% Subject name
% SubjectName = '105923';
% Build the path of the files to import
AnatDir    = fullfile(data_dir, SubjectName, 'MEG', 'anatomy');
Run1File   = fullfile(data_dir, SubjectName, 'unprocessed', 'MEG', '3-Restin', '4D', 'c,rfDC');
NoiseFile  = fullfile(data_dir, SubjectName, 'unprocessed', 'MEG', '1-Rnoise', '4D', 'c,rfDC');
% Check if the folder contains the required files
if ~file_exist(AnatDir) || ~file_exist(Run1File) || ~file_exist(NoiseFile)
    error(['The folder ' data_dir ' does not contain subject #105923 from the HCP-MEG distribution.']);
end
%% ===== CREATE PROTOCOL =====
% The protocol name has to be a valid folder name (no spaces, no weird characters...)
% ProtocolName = 'HCPsLoretaPsdBandsPipeline';
% Start brainstorm without the GUI
if ~brainstorm('status')
    brainstorm nogui
end
if FLAG.NEWPROTOCAOL==1
    % Delete existing protocol
    gui_brainstorm('DeleteProtocol', ProtocolName);
    % Create new protocol
    gui_brainstorm('CreateProtocol', ProtocolName, 0, 0);
end
% Start a new report
bst_report('Start');
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if FLAG.PREPROCESSING==1
    %% ===== IMPORT DATA =====
    % Process: Import anatomy folder
    bst_process('CallProcess', 'process_import_anatomy', [], [], ...
        'subjectname', SubjectName, ...
        'mrifile',     {AnatDir, 'HCPv3'}, ...
        'nvertices',   15000);
    % Process: Create link to raw files
    sFilesRun1Raw = bst_process('CallProcess', 'process_import_data_raw', [], [], ...
        'subjectname',  SubjectName, ...
        'datafile',     {Run1File, '4D'}, ...
        'channelalign', 1);
    sFilesNoiseRaw = bst_process('CallProcess', 'process_import_data_raw', [], [], ...
        'subjectname',  SubjectName, ...
        'datafile',     {NoiseFile, '4D'}, ...
        'channelalign', 1);
    %% ===== RESAMPLE ===
    % Process: Resample: 250Hz
    sFilesRun1Resample = bst_process('CallProcess', 'process_resample', sFilesRun1Raw, [], ...
        'freq',     250, ...
        'read_all', 0);
    
    sFilesNoiseResample = bst_process('CallProcess', 'process_resample', sFilesNoiseRaw, [], ...
        'freq',     250, ...
        'read_all', 0);
    
    bst_process('CallProcess', 'process_delete', [sFilesRun1Raw, sFilesNoiseRaw], [], ...
        'target', 2);  % Delete folders
    sFilesRawResample = [sFilesRun1Resample, sFilesNoiseResample];
    
    %% ===== PRE-PROCESSING =====
    % Process: Notch filter: 60Hz 120Hz 180Hz 240Hz 300Hz
    sFilesNotch = bst_process('CallProcess', 'process_notch', sFilesRawResample, [], ...
        'freqlist',    [60, 120, 180, 240], ...
        'sensortypes', 'MEG, EEG', ...
        'read_all',    1);
    
    % Process: High-pass:0.3Hz
    sFilesBand = bst_process('CallProcess', 'process_bandpass', sFilesNotch, [], ...
        'sensortypes', 'MEG, EEG', ...
        'highpass',    0.3, ...
        'lowpass',     0, ...
        'attenuation', 'strict', ...  % 60dB
        'mirror',      0, ...
        'useold',      0, ...
        'read_all',    1);
    %%
    %     % Process: Power spectrum density (Welch)
    %     sFilesPsdAfter = bst_process('CallProcess', 'process_psd', sFilesBand, [], ...
    %         'timewindow',  [0 100], ...
    %         'win_length',  4, ...
    %         'win_overlap', 50, ...
    %         'sensortypes', 'MEG, EEG', ...
    %         'edit',        struct(...
    %         'Comment',         'Power', ...
    %         'TimeBands',       [], ...
    %         'Freqs',           [], ...
    %         'ClusterFuncTime', 'none', ...
    %         'Measure',         'power', ...
    %         'Output',          'all', ...
    %         'SaveKernel',      0));
    %
    %     % % Mark bad channels
    %     % bst_process('CallProcess', 'process_channel_setbad', sFilesBand, [], ...
    %     %             'sensortypes', 'A227, A244, A246, A248');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %
    %     % Process: Snapshot: Frequency spectrum
    %     bst_process('CallProcess', 'process_snapshot', sFilesPsdAfter, [], ...
    %         'target',         10, ...  % Frequency spectrum
    %         'modality',       1);      % MEG (All)
    
    % Process: Delete folders
    bst_process('CallProcess', 'process_delete', [sFilesRawResample, sFilesNotch], [], ...
        'target', 2);  % Delete folder
    
    
    %% ===== ARTIFACT CLEANING =====
    % Process: Select data files in: */*
    sFilesBand = bst_process('CallProcess', 'process_select_files_data', [], [], ...
        'subjectname', 'All');
    
    % Process: Select file names with tag: 3-Restin
    sFilesRest = bst_process('CallProcess', 'process_select_tag', sFilesBand, [], ...
        'tag',    '3-Restin', ...
        'search', 1, ...  % Search the file names
        'select', 1);  % Select only the files with the tag
    
    % Process: Detect heartbeats
    bst_process('CallProcess', 'process_evt_detect_ecg', sFilesRest, [], ...
        'channelname', 'ECG+, -ECG-', ...
        'timewindow',  [], ...
        'eventname',   'cardiac');
    
    % Process: SSP ECG: cardiac
    bst_process('CallProcess', 'process_ssp_ecg', sFilesRest, [], ...
        'eventname',   'cardiac', ...
        'sensortypes', 'MEG', ...
        'usessp',      1, ...
        'select',      1);
    
    % Process: Snapshot: Sensors/MRI registration
    bst_process('CallProcess', 'process_snapshot', sFilesRest, [], ...
        'target',         1, ...  % Sensors/MRI registration
        'modality',       1, ...  % MEG (All)
        'orient',         1);  % left
    
    % Process: Snapshot: SSP projectors
    bst_process('CallProcess', 'process_snapshot', sFilesRest, [], ...
        'target',         2, ...  % SSP projectors
        'modality',       1);     % MEG (All)
end
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if FLAG.HEADMODEL==1
    %% ===== HEADMODEL =====
    % Process: Select file names with tag: task-rest
    sFilesNoise = bst_process('CallProcess', 'process_select_tag', sFilesBand, [], ...
        'tag',    '1-Rnoise', ...
        'search', 1, ...  % Search the file names
        'select', 1);  % Select only the files with the tag
    
    % Process: Compute covariance (noise or data)
    bst_process('CallProcess', 'process_noisecov', sFilesNoise, [], ...
        'baseline',       [], ...
        'sensortypes',    'MEG', ...
        'target',         1, ...  % Noise covariance     (covariance over baseline time window)
        'dcoffset',       1, ...  % Block by block, to avoid effects of slow shifts in data
        'identity',       0, ...
        'copycond',       1, ...
        'copysubj',       0, ...
        'replacefile',    1);  % Replace
    
    %% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Process: Generate BEM surfaces
    sBemSurf = bst_process('CallProcess', 'process_generate_bem', sFilesRest, [], ...
        'subjectname', SubjectName, ...
        'nscalp',      1922, ...%%%%8004
        'nouter',      1922, ...
        'ninner',      1922, ...
        'thickness',   4,...
        'copycond',       1);
    
    % Process: Compute head model
    sHeadmodel = bst_process('CallProcess', 'process_headmodel', sBemSurf, [], ...
        'Comment',     '', ...
        'sourcespace', 1, ...  % Cortex surface
        'volumegrid',  struct(...
        'Method',        'adaptive', ...
        'nLayers',       17, ...
        'Reduction',     3, ...
        'nVerticesInit', 8004, ...%%%%4002
        'Resolution',    0.005, ...
        'FileName',      []), ...
        'meg',         4, ...  % OpenMEEG BEM
        'eeg',         1, ...  %
        'ecog',        1, ...  %
        'seeg',        1, ...  %
        'openmeeg',    struct(...
        'BemSelect',    [1, 1, 1], ...
        'BemCond',      [1, 0.0125, 1], ...
        'BemNames',     {{'Scalp', 'Skull', 'Brain'}}, ...
        'BemFiles',     {{}}, ...
        'isAdjoint',    0, ...
        'isAdaptative', 1, ...
        'isSplit',      0, ...
        'copycond',       1, ...
        'SplitLength',  4000));
end

%% SAVE RESULTS
% % save head model
% [sHeadmodelFileName,sHeadmodelType, sHeadmodelisAnatomy] = file_fullpath( sHeadmodel.FileName );
% [sHeadmodelPath, name, ext]=bst_fileparts(sHeadmodelFileName);
% file_copy(sHeadmodelPath,['.\result\',SubjectName]);
% save signal
sFilesRestImported = bst_process('CallProcess', 'process_import_data_time', sFilesRest, [], ...
    'subjectname', SubjectName, ...
    'condition',   '', ...
    'timewindow',  [], ...
    'split',       0, ...
    'ignoreshort', 0, ...
    'usectfcomp',  0, ...
    'usessp',      0, ...
    'freq',        [], ...
    'baseline',    []);

% [sFilesRestFileName,sFilesRestFileType, sFilesRestisAnatomy] = file_fullpath( sFilesRest.FileName );
% [sFilesRestFilePath, name, ext]=bst_fileparts(sFilesRestFileName);
% file_copy(sFilesRestFilePath,['.\result\',SubjectName]);

%copy all
    ProtocolInfo=bst_get('ProtocolInfo');
    [ProtocolFolder, name, ext]=bst_fileparts(ProtocolInfo.STUDIES);
    file_copy(ProtocolFolder,['.\result\']);
    
% Process: Delete folders/ imported is unuseful for next steps in pipeline, but we can make a backup
bst_process('CallProcess', 'process_delete', sFilesRestImported, [], ...
    'target', 2);  % Delete folder

% save workspace
filename = './temp/hcp_preprocessing_pipeline.mat';
clear ans
save(filename)

% output
switch nargout
    case 1
        varargout{1}=sHeadmodel;
    case 2
        varargout{1}=sHeadmodel;
        varargout{2}=sFilesRest;
end

%%
% Save and display report
ReportFile = bst_report('Save', []);
% bst_report('Open', ReportFile);
% end
